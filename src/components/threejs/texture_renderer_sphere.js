import * as THREE from "three";
import { vec3 } from "gl-matrix/esm";
import * as Constants from "../utility/constants";
import * as LINALG from "@/components/glsl/linalg";
import * as UTILITY from "@/components/glsl/utility";
import { TextureRenderer } from "./texture_renderer";
import { SpherelikeGrid } from "./custom_objects";


const glsl = x => x[0];
/**
 * TODO
 * This class renders the textures generated by offscreen renderers.
 * It can render the data:
 * - specialized: TODO specific use cases tailored for the input data
 * - raw: from the uv data access the nearest texel from the input texture and render as is
 * - processed: TODO more control over the data
 */
class TextureRendererSphere extends TextureRenderer {

    constructor(renderer, simulationParameters, colorMaps, scene, useAnglePlane) {
        super(renderer, simulationParameters, colorMaps, scene, useAnglePlane);
        console.warn("CONSTRUCTOR: TextureRendererSphere");
    }
    
    initializeTexturedGeometry(){
        this.spherelikeGrid = new SpherelikeGrid(this.scene, this.textured_material);

        var subdivide = false;
        var pixels_x = 100;
        var pixels_y = 100;
        this.spherelikeGrid.updateGrid(subdivide, pixels_x, pixels_y);

        this.textured_mesh = this.spherelikeGrid.mesh;
    }

}

export { TextureRendererSphere }