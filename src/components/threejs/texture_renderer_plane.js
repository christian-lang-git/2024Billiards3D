import * as THREE from "three";
import { vec3 } from "gl-matrix/esm";
import * as Constants from "../utility/constants";
import * as LINALG from "@/components/glsl/linalg";
import * as UTILITY from "@/components/glsl/utility";
import { TextureRenderer } from "./texture_renderer";


const glsl = x => x[0];
/**
 * TODO
 * This class renders the textures generated by offscreen renderers.
 * It can render the data:
 * - specialized: TODO specific use cases tailored for the input data
 * - raw: from the uv data access the nearest texel from the input texture and render as is
 * - processed: TODO more control over the data
 */
class TextureRendererPlane extends TextureRenderer {

    constructor(renderer_id, renderer, simulationParameters, colorMaps, scene, useAnglePlane) {
        super(renderer_id, renderer, simulationParameters, colorMaps, scene, useAnglePlane);
        console.warn("CONSTRUCTOR: TextureRendererPlane");
    }
    
    initializeTexturedGeometry(){
        this.textured_plane_geometry = new THREE.PlaneGeometry(1, 1);
        this.textured_mesh = new THREE.Mesh(this.textured_plane_geometry, this.textured_material);
        this.scene.add(this.textured_mesh);
    }

    updateTransform(pos_x, pos_y, scale_x, scale_y) {
        this.textured_mesh.scale.set(scale_x, scale_y, 1);
        this.textured_mesh.position.set(pos_x, pos_y, 0);
    }

    addAdditionalUniforms(){
        super.addAdditionalUniforms();
        this.uniforms["is_plane"] = { type: 'bool', value: true };
    }
}

export { TextureRendererPlane }